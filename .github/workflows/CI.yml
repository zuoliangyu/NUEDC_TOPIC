name: Update Readme Tree and Deploy Docsify Site

on:
  push:
    branches:
      - master
  workflow_dispatch:

# 明确声明工作流所需的权限
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # --- 作业一：更新 README 中的目录树 ---
  update-readme-tree:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: 'master'

      - name: Generate Readme Tree
        uses: RavelloH/readme-tree@v1.1.0
        with:
          showsize: "no"
          args: --ignore ".github,tree.bak"

      - name: Commit updated README.md
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(readme): Auto-update file tree [skip ci]"
          branch: master
          file_pattern: README.md

  # --- 作业二：构建并部署 Docsify 网站 ---
  deploy-docsify-site:
    runs-on: ubuntu-latest
    # 使用 needs 来确保它在更新完 README 后再执行
    needs: update-readme-tree
    steps:
      - name: Checkout docsify-source branch (template)
        uses: actions/checkout@v4
        with:
          ref: 'docsify-source'

      - name: Checkout master branch (content)
        uses: actions/checkout@v4
        with:
          ref: 'master'
          path: 'source_files'

      # --- 关键修正 ---
      # 1. 修正了换行符 \n 被当作纯文本的错误。
      # 2. 修正了 URL 编码，只对文件名进行编码，解决了 404 问题。
      - name: Generate _sidebar.md
        shell: python
        run: |
          import os
          import urllib.parse

          source_dir = "source_files"
          sidebar_file = "_sidebar.md"
          ignore_list = [".github", "assets", "README.md", "tree.bak", ".git"]

          # 使用列表来构建侧边栏行，然后用换行符连接它们，这更清晰可靠
          lines = ["* [**回到首页**](/)"]

          year_dirs = sorted(
              [d for d in os.listdir(source_dir) if os.path.isdir(os.path.join(source_dir, d)) and d not in ignore_list],
              reverse=True
          )

          for year in year_dirs:
              lines.append(f"\n* **{year}**") # 在年份前添加换行符
              year_path = os.path.join(source_dir, year)
              files = sorted(os.listdir(year_path))

              for filename in files:
                  if filename.startswith("0_") or filename.startswith("."):
                      continue
                  
                  clean_title = os.path.splitext(filename)[0].replace("_", " ")
                  
                  # 只对文件名进行 URL 编码，而不是整个路径
                  encoded_filename = urllib.parse.quote(filename)
                  link_path = f"{year}/{encoded_filename}"

                  lines.append(f"  * [{clean_title}]({link_path})")

          # 将所有行连接成一个单一的字符串，并以换行符结尾
          sidebar_content = "\n".join(lines) + "\n"

          with open(sidebar_file, "w", encoding="utf-8") as f:
              f.write(sidebar_content)
          print(f"'{sidebar_file}' generated successfully!")

      - name: Prepare deployment directory
        run: |
          rsync -av --exclude='.git' source_files/ .
          rm -rf source_files

      - name: List files for deployment
        run: ls -R

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: .
          force_orphan: true
