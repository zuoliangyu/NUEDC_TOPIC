name: 🚀 电子设计竞赛真题库 - 三分支自动部署

on:
  push:
    branches:
      - master  # 监听master分支的PDF文件变更
    paths-ignore:
      - 'README.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: '强制重建整个网站'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'

jobs:
  # 🔍 检查是否需要构建
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 📥 检出master分支
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 检查文件变更
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "⚡ 手动触发构建"
          else
            # 检查是否有真题文件变更
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(pdf|doc|docx|xls|xlsx|jpg|png|zip)$' || true)
            if [[ -n "$CHANGED_FILES" ]]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "📄 检测到真题文件变更："
              echo "$CHANGED_FILES"
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "ℹ️ 未检测到真题文件变更，跳过构建"
            fi
          fi

  # 🏗️ 构建和部署网站
  build-and-deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # 第一步：检出source分支（包含VitePress配置）
      - name: 📥 检出source分支
        uses: actions/checkout@v4
        with:
          ref: source
          token: ${{ secrets.GITHUB_TOKEN }}
          path: source

      # 第二步：检出master分支（包含PDF等资源文件）
      - name: 📥 检出master分支资源
        uses: actions/checkout@v4
        with:
          ref: master
          path: resources

      # 第三步：设置Node.js环境
      - name: 🟢 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 第四步：同步资源文件到source分支
      - name: 🔄 同步资源文件
        run: |
          # 进入source目录
          cd source
          
          # 清理旧的资源文件
          rm -rf docs/public/真题 docs/public/综合测评 docs/public/assets
          
          # 复制新的资源文件
          mkdir -p docs/public
          cp -r ../resources/真题 docs/public/
          cp -r ../resources/综合测评 docs/public/
          cp -r ../resources/assets docs/public/
          
          echo "✅ 资源文件同步完成"
          echo "📊 同步的文件统计："
          echo "PDF文件: $(find docs/public -name "*.pdf" | wc -l)"
          echo "DOC文件: $(find docs/public -name "*.doc*" | wc -l)"

      # 第五步：生成动态内容
      - name: 📝 生成文档页面
        run: |
          cd source
          
          # 运行文档生成脚本
          npm run generate
          
          echo "✅ 文档页面生成完成"

      # 第六步：安装依赖并构建
      - name: 📦 设置npm缓存
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('source/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 安装依赖
        run: |
          cd source
          npm ci

      - name: 🔨 构建网站
        run: |
          cd source
          npm run build
          
          echo "✅ 网站构建完成"
          echo "📁 构建产物："
          ls -la docs/.vitepress/dist/

      # 第七步：配置GitHub Pages
      - name: 🔧 配置GitHub Pages
        uses: actions/configure-pages@v4

      # 第八步：上传构建产物
      - name: 📤 上传到GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: source/docs/.vitepress/dist

      # 第九步：部署到GitHub Pages
      - name: 🚀 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 第十步：更新README中的链接（可选）
      - name: 📄 更新README
        if: success()
        run: |
          cd resources
          
          # 创建Python脚本文件
          cat > update_readme.py << 'EOF'
          import re
          from datetime import datetime
          import os
          
          # 读取README
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()
          
          # 获取部署URL
          deploy_url = os.environ.get('DEPLOY_URL', 'https://你的用户名.github.io/你的仓库名')
          
          # 添加网站链接信息
          site_info = f'''
          
          ## 🌐 在线访问
          
          **[📖 点击访问在线真题库]({deploy_url})**
          
          - 🔍 支持全文搜索
          - 📱 适配移动设备  
          - 📄 在线PDF预览
          - ⚡ 快速加载
          
          > 最后更新: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          
          '''
          
          # 检查是否已存在在线访问部分
          if '## 🌐 在线访问' not in content:
              # 在文件树前添加网站信息
              tree_start = content.find('<!-- readme-tree start -->')
              if tree_start != -1:
                  content = content[:tree_start] + site_info + '\n' + content[tree_start:]
              else:
                  content = content + site_info
          
          # 写回文件
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)
          
          print("✅ README已更新")
          EOF
          
          # 设置环境变量并运行脚本
          export DEPLOY_URL="${{ steps.deployment.outputs.page_url }}"
          python3 update_readme.py
          
          # 提交更新（如果有变更）
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git add README.md || true
          git diff --staged --quiet || git commit -m "📚 更新在线访问链接 [skip ci]" || true
          git push origin master || true

  # 📊 部署成功通知
  notify-success:
    needs: [build-and-deploy]
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: 🎉 部署成功通知
        run: |
          echo "## 🎉 部署成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 项目架构" >> $GITHUB_STEP_SUMMARY
          echo "- **master分支**: 存储PDF/DOC真题文件" >> $GITHUB_STEP_SUMMARY
          echo "- **source分支**: VitePress源码和配置" >> $GITHUB_STEP_SUMMARY  
          echo "- **gh-pages分支**: 构建后的静态网站" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 访问地址" >> $GITHUB_STEP_SUMMARY
          echo "**[🚀 立即访问真题库](${{ needs.build-and-deploy.outputs.page_url }})**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ 功能特性" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 智能搜索: 快速查找题目" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 在线预览: 无需下载即可查看PDF" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 响应式设计: 完美适配手机和电脑" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ 极速加载: 现代化的性能优化" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 分类导航: 按年份和题型快速定位" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 下次更新" >> $GITHUB_STEP_SUMMARY
          echo "只需要向master分支添加新的PDF文件，网站将自动更新！" >> $GITHUB_STEP_SUMMARY