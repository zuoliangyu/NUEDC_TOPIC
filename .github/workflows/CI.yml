name: 📚 全国大学生电子设计竞赛真题 - 自动更新与部署

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/**'
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: '强制重建整个网站'
        required: false
        default: false
        type: boolean

# 声明工作流权限
permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

# 环境变量
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 预检查作业
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 检查文件变更
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            # 检查是否有PDF、DOC等文件变更
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(pdf|doc|docx|xls|xlsx)$' || true)
            if [[ -n "$CHANGED_FILES" ]]; then
              echo "files_changed=true" >> $GITHUB_OUTPUT
              echo "📄 检测到题目文件变更:"
              echo "$CHANGED_FILES"
            else
              echo "files_changed=false" >> $GITHUB_OUTPUT
              echo "ℹ️ 未检测到题目文件变更"
            fi
          fi

      - name: 🎯 决定是否构建
        id: check
        run: |
          if [[ "${{ steps.changes.outputs.files_changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ 需要构建网站"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "⏭️ 跳过构建"
          fi

  # 📄 更新README文件树
  update-readme:
    needs: pre-check
    if: needs.pre-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出master分支
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🌳 生成文件树和侧边栏
        run: |
          echo "🚀 开始生成文件树..."
          python generate_tree.py

      - name: 📊 显示生成的文件
        run: |
          echo "📄 生成的README.md片段:"
          if grep -A 20 "readme-tree start" README.md; then
            echo "✅ README.md包含文件树"
          else
            echo "❌ README.md未包含文件树"
          fi
          
          echo "📋 生成的_sidebar.md:"
          if [[ -f "_sidebar.md" ]]; then
            head -20 _sidebar.md
            echo "✅ 侧边栏文件已生成"
          else
            echo "❌ 侧边栏文件未生成"
          fi

      - name: 💾 提交文件树更新
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📚 docs: 自动更新文件树和侧边栏 [skip ci]"
          branch: master
          file_pattern: 'README.md _sidebar.md'
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions <actions@github.com>"

  # 🚀 构建并部署Docsify网站
  build-and-deploy:
    needs: [pre-check, update-readme]
    if: needs.pre-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 检出最新的master分支
        uses: actions/checkout@v4
        with:
          ref: master

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📋 确保侧边栏存在
        run: |
          if [[ ! -f "_sidebar.md" ]]; then
            echo "⚠️ 侧边栏文件不存在，生成中..."
            python generate_tree.py
          else
            echo "✅ 侧边栏文件存在"
          fi

      - name: 🔧 验证Docsify配置
        run: |
          echo "📄 检查必要文件:"
          
          # 检查index.html
          if [[ -f "index.html" ]]; then
            echo "✅ index.html 存在"
          else
            echo "❌ index.html 不存在"
            exit 1
          fi
          
          # 检查.nojekyll
          if [[ -f ".nojekyll" ]]; then
            echo "✅ .nojekyll 存在"
          else
            echo "⚠️ 创建 .nojekyll 文件"
            touch .nojekyll
          fi
          
          # 检查_sidebar.md
          if [[ -f "_sidebar.md" ]]; then
            echo "✅ _sidebar.md 存在，包含 $(wc -l < _sidebar.md) 行"
          else
            echo "❌ _sidebar.md 不存在"
            exit 1
          fi

      - name: 📦 准备部署文件
        run: |
          echo "📁 当前目录内容:"
          ls -la
          
          echo "📊 统计信息:"
          echo "PDF文件数量: $(find . -name "*.pdf" | wc -l)"
          echo "DOC文件数量: $(find . -name "*.doc*" | wc -l)"
          echo "年份目录数量: $(find . -maxdepth 1 -type d -name "[0-9][0-9][0-9][0-9]" | wc -l)"

      - name: 🔧 配置GitHub Pages
        uses: actions/configure-pages@v4

      - name: 📤 上传到GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: 🚀 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 📊 部署后验证
  post-deploy-check:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always() && needs.build-and-deploy.result == 'success'
    
    steps:
      - name: 🏥 健康检查
        run: |
          echo "🎉 部署完成！"
          echo "🌐 网站地址: ${{ needs.build-and-deploy.outputs.page_url || 'https://你的用户名.github.io/你的仓库名' }}"
          echo ""
          echo "📋 功能清单:"
          echo "✅ 文件树自动更新"
          echo "✅ Docsify网站部署"
          echo "✅ PDF在线预览"
          echo "✅ 搜索功能"
          echo "✅ 响应式设计"
          echo ""
          echo "📖 下次提交时，如果包含PDF/DOC文件变更，将自动触发更新"

      - name: 📊 创建部署总结
        run: |
          echo "## 📚 电赛真题网站部署报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 本次部署" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 访问地址" >> $GITHUB_STEP_SUMMARY
          echo "[📖 在线查看真题库](https://你的用户名.github.io/你的仓库名)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ 功能特性" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 PDF文件在线预览" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 全文搜索功能" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 响应式设计，支持移动端" >> $GITHUB_STEP_SUMMARY
          echo "- 🌳 自动生成文件目录树" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ 快速导航和分类浏览" >> $GITHUB_STEP_SUMMARY
